// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: src/api.capnp

pub mod option {
  /* T */
  pub use self::Which::{None, Some};

  #[derive(Copy, Clone)]
  pub struct Owned<T> {
    _phantom: ::core::marker::PhantomData<T>,
  }
  impl<'a, T> ::capnp::traits::Owned<'a> for Owned<T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    type Reader = Reader<'a, T>;
    type Builder = Builder<'a, T>;
  }
  impl<'a, T> ::capnp::traits::OwnedStruct<'a> for Owned<T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    type Reader = Reader<'a, T>;
    type Builder = Builder<'a, T>;
  }
  impl<T> ::capnp::traits::Pipelined for Owned<T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    type Pipeline = Pipeline<T>;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    reader: ::capnp::private::layout::StructReader<'a>,
    _phantom: ::core::marker::PhantomData<T>,
  }

  impl<'a, T> ::capnp::traits::HasTypeId for Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a, T> ::capnp::traits::FromStructReader<'a> for Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a, T> {
      Reader {
        reader,
        _phantom: ::core::marker::PhantomData,
      }
    }
  }

  impl<'a, T> ::capnp::traits::FromPointerReader<'a> for Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a, T>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a, T> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a, T> ::capnp::traits::Imbue<'a> for Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a, T> Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    pub fn reborrow(&self) -> Reader<'_, T> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    pub fn has_some(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 0 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a, T>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(Some(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        1 => ::core::result::Result::Ok(None(())),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    builder: ::capnp::private::layout::StructBuilder<'a>,
    _phantom: ::core::marker::PhantomData<T>,
  }
  impl<'a, T> ::capnp::traits::HasStructSize for Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a, T> ::capnp::traits::HasTypeId for Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a, T> ::capnp::traits::FromStructBuilder<'a> for Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, T> {
      Builder {
        builder,
        _phantom: ::core::marker::PhantomData,
      }
    }
  }

  impl<'a, T> ::capnp::traits::ImbueMut<'a> for Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a, T> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a, T> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a, T>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a, T> ::capnp::traits::SetPointerBuilder for Reader<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a, T>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a, T> Builder<'a, T>
  where
    T: for<'c> ::capnp::traits::Owned<'c>,
  {
    pub fn into_reader(self) -> Reader<'a, T> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_, T> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_, T> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn initn_some(self, length: u32) -> <T as ::capnp::traits::Owned<'a>>::Builder {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
    }
    #[inline]
    pub fn set_some(&mut self, value: <T as ::capnp::traits::Owned<'_>>::Reader) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_some(self) -> <T as ::capnp::traits::Owned<'a>>::Builder {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
    }
    pub fn has_some(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 0 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_none(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 1);
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a, T>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(Some(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        1 => ::core::result::Result::Ok(None(())),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Pipeline<T> {
    _typeless: ::capnp::any_pointer::Pipeline,
    _phantom: ::core::marker::PhantomData<T>,
  }
  impl<T> ::capnp::capability::FromTypelessPipeline for Pipeline<T> {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline<T> {
      Pipeline {
        _typeless: typeless,
        _phantom: ::core::marker::PhantomData,
      }
    }
  }
  impl<T> Pipeline<T>
  where
    T: ::capnp::traits::Pipelined,
    <T as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline,
  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
    pub const TYPE_ID: u64 = 0xe347_d5e3_66b2_dafa;
  }
  pub enum Which<A0> {
    Some(A0),
    None(()),
  }
  pub type WhichReader<'a, T> = Which<::capnp::Result<<T as ::capnp::traits::Owned<'a>>::Reader>>;
  pub type WhichBuilder<'a, T> = Which<::capnp::Result<<T as ::capnp::traits::Owned<'a>>::Builder>>;
}

pub mod store_config {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_store_url(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_store_url(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_client_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_client_id(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_autolock_timeout_secs(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_default_identity_id(
      self,
    ) -> ::capnp::Result<crate::api_capnp::option::Reader<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        Some(&_private::DEFAULT_DEFAULT_IDENTITY_ID[..]),
      )
    }
    pub fn has_default_identity_id(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_store_url(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_store_url(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_store_url(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_store_url(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_client_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_client_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_client_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_client_id(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_autolock_timeout_secs(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_autolock_timeout_secs(&mut self, value: u64) {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_default_identity_id(
      self,
    ) -> ::capnp::Result<crate::api_capnp::option::Builder<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        Some(&_private::DEFAULT_DEFAULT_IDENTITY_ID[..]),
      )
    }
    #[inline]
    pub fn set_default_identity_id(
      &mut self,
      value: crate::api_capnp::option::Reader<'_, ::capnp::text::Owned>,
    ) -> ::capnp::Result<()> {
      <crate::api_capnp::option::Reader<'_,::capnp::text::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_default_identity_id(self) -> crate::api_capnp::option::Builder<'a, ::capnp::text::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    pub fn has_default_identity_id(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_default_identity_id(&self) -> crate::api_capnp::option::Pipeline<::capnp::text::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
  }
  mod _private {
    pub static DEFAULT_DEFAULT_IDENTITY_ID: [capnp::Word; 3] = [
      capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 4 };
    pub const TYPE_ID: u64 = 0xde1d_89e9_9999_f92e;
  }
}

pub mod event_data {
  pub use self::Which::{
    ClipboardDone, ClipboardProviding, IdentityAdded, SecretOpened, SecretVersionAdded, StoreLocked, StoreUnlocked,
  };

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(StoreUnlocked(::capnp::traits::FromStructReader::new(self.reader))),
        1 => ::core::result::Result::Ok(StoreLocked(::capnp::traits::FromStructReader::new(self.reader))),
        2 => ::core::result::Result::Ok(SecretOpened(::capnp::traits::FromStructReader::new(self.reader))),
        3 => ::core::result::Result::Ok(SecretVersionAdded(::capnp::traits::FromStructReader::new(self.reader))),
        4 => ::core::result::Result::Ok(IdentityAdded(::capnp::traits::FromStructReader::new(self.reader))),
        5 => ::core::result::Result::Ok(ClipboardProviding(::capnp::traits::FromStructReader::new(self.reader))),
        6 => ::core::result::Result::Ok(ClipboardDone(())),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn init_store_unlocked(self) -> crate::api_capnp::event_data::store_unlocked::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 0);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_store_locked(self) -> crate::api_capnp::event_data::store_locked::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      self.builder.get_pointer_field(0).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_secret_opened(self) -> crate::api_capnp::event_data::secret_opened::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 2);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      self.builder.get_pointer_field(2).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_secret_version_added(self) -> crate::api_capnp::event_data::secret_version_added::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 3);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      self.builder.get_pointer_field(2).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_identity_added(self) -> crate::api_capnp::event_data::identity_added::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 4);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_clipboard_providing(self) -> crate::api_capnp::event_data::clipboard_providing::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 5);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      self.builder.get_pointer_field(2).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn set_clipboard_done(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 6);
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(StoreUnlocked(::capnp::traits::FromStructBuilder::new(self.builder))),
        1 => ::core::result::Result::Ok(StoreLocked(::capnp::traits::FromStructBuilder::new(self.builder))),
        2 => ::core::result::Result::Ok(SecretOpened(::capnp::traits::FromStructBuilder::new(self.builder))),
        3 => ::core::result::Result::Ok(SecretVersionAdded(::capnp::traits::FromStructBuilder::new(
          self.builder,
        ))),
        4 => ::core::result::Result::Ok(IdentityAdded(::capnp::traits::FromStructBuilder::new(self.builder))),
        5 => ::core::result::Result::Ok(ClipboardProviding(::capnp::traits::FromStructBuilder::new(
          self.builder,
        ))),
        6 => ::core::result::Result::Ok(ClipboardDone(())),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
    pub const TYPE_ID: u64 = 0xa0ee_8dd9_cd28_2d44;
  }
  pub enum Which<A0, A1, A2, A3, A4, A5> {
    StoreUnlocked(A0),
    StoreLocked(A1),
    SecretOpened(A2),
    SecretVersionAdded(A3),
    IdentityAdded(A4),
    ClipboardProviding(A5),
    ClipboardDone(()),
  }
  pub type WhichReader<'a> = Which<
    crate::api_capnp::event_data::store_unlocked::Reader<'a>,
    crate::api_capnp::event_data::store_locked::Reader<'a>,
    crate::api_capnp::event_data::secret_opened::Reader<'a>,
    crate::api_capnp::event_data::secret_version_added::Reader<'a>,
    crate::api_capnp::event_data::identity_added::Reader<'a>,
    crate::api_capnp::event_data::clipboard_providing::Reader<'a>,
  >;
  pub type WhichBuilder<'a> = Which<
    crate::api_capnp::event_data::store_unlocked::Builder<'a>,
    crate::api_capnp::event_data::store_locked::Builder<'a>,
    crate::api_capnp::event_data::secret_opened::Builder<'a>,
    crate::api_capnp::event_data::secret_version_added::Builder<'a>,
    crate::api_capnp::event_data::identity_added::Builder<'a>,
    crate::api_capnp::event_data::clipboard_providing::Builder<'a>,
  >;

  pub mod store_unlocked {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_identity(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_identity(&mut self, value: crate::api_capnp::identity::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_identity(self) -> crate::api_capnp::identity::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_identity(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_identity(&self) -> crate::api_capnp::identity::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
      pub const TYPE_ID: u64 = 0x82d5_02cc_91f1_e170;
    }
  }

  pub mod store_locked {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
      pub const TYPE_ID: u64 = 0xd0d9_13a3_131a_a966;
    }
  }

  pub mod secret_opened {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_identity(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_secret_id(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_identity(&mut self, value: crate::api_capnp::identity::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_identity(self) -> crate::api_capnp::identity::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_identity(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_secret_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(2).set_text(value);
      }
      #[inline]
      pub fn init_secret_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      pub fn has_secret_id(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_identity(&self) -> crate::api_capnp::identity::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
      pub const TYPE_ID: u64 = 0x9569_d207_016e_40d5;
    }
  }

  pub mod secret_version_added {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_identity(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_secret_id(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_identity(&mut self, value: crate::api_capnp::identity::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_identity(self) -> crate::api_capnp::identity::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_identity(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_secret_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(2).set_text(value);
      }
      #[inline]
      pub fn init_secret_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      pub fn has_secret_id(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_identity(&self) -> crate::api_capnp::identity::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
      pub const TYPE_ID: u64 = 0xa365_0559_0910_e305;
    }
  }

  pub mod identity_added {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_identity(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_identity(&mut self, value: crate::api_capnp::identity::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_identity(self) -> crate::api_capnp::identity::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_identity(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_identity(&self) -> crate::api_capnp::identity::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
      pub const TYPE_ID: u64 = 0xcedf_9fe6_dd35_b99d;
    }
  }

  pub mod clipboard_providing {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_block_id(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_property(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_property(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_block_id(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_property(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_property(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(2).set_text(value);
      }
      #[inline]
      pub fn init_property(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(2).init_text(size)
      }
      pub fn has_property(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
      pub const TYPE_ID: u64 = 0xaa88_0f2e_ade6_2b14;
    }
  }
}

pub mod event {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<crate::api_capnp::event_data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_data(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_id(&mut self, value: u64) {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_data(self) -> ::capnp::Result<crate::api_capnp::event_data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_data(&mut self, value: crate::api_capnp::event_data::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_data(self) -> crate::api_capnp::event_data::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_data(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_data(&self) -> crate::api_capnp::event_data::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
    pub const TYPE_ID: u64 = 0x8e7d_8c32_5abe_4062;
  }
}

pub mod password_generator_param {
  pub use self::Which::{Chars, Words};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    pub fn has_chars(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 0 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_words(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(Chars(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        1 => ::core::result::Result::Ok(Words(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn set_chars(
      &mut self,
      value: crate::api_capnp::password_generator_param::password_generator_chars_param::Reader<'_>,
    ) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_chars(self) -> crate::api_capnp::password_generator_param::password_generator_chars_param::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_chars(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 0 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_words(
      &mut self,
      value: crate::api_capnp::password_generator_param::password_generator_words_param::Reader<'_>,
    ) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_words(self) -> crate::api_capnp::password_generator_param::password_generator_words_param::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_words(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(Chars(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        1 => ::core::result::Result::Ok(Words(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
    pub const TYPE_ID: u64 = 0xfc79_8280_8d74_1269;
  }
  pub enum Which<A0, A1> {
    Chars(A0),
    Words(A1),
  }
  pub type WhichReader<'a> = Which<
    ::capnp::Result<crate::api_capnp::password_generator_param::password_generator_chars_param::Reader<'a>>,
    ::capnp::Result<crate::api_capnp::password_generator_param::password_generator_words_param::Reader<'a>>,
  >;
  pub type WhichBuilder<'a> = Which<
    ::capnp::Result<crate::api_capnp::password_generator_param::password_generator_chars_param::Builder<'a>>,
    ::capnp::Result<crate::api_capnp::password_generator_param::password_generator_words_param::Builder<'a>>,
  >;

  pub mod password_generator_chars_param {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_num_chars(self) -> u8 {
        self.reader.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn get_include_uppers(self) -> bool {
        self.reader.get_bool_field(8)
      }
      #[inline]
      pub fn get_include_numbers(self) -> bool {
        self.reader.get_bool_field(9)
      }
      #[inline]
      pub fn get_include_symbols(self) -> bool {
        self.reader.get_bool_field(10)
      }
      #[inline]
      pub fn get_require_upper(self) -> bool {
        self.reader.get_bool_field(11)
      }
      #[inline]
      pub fn get_require_number(self) -> bool {
        self.reader.get_bool_field(12)
      }
      #[inline]
      pub fn get_require_symbol(self) -> bool {
        self.reader.get_bool_field(13)
      }
      #[inline]
      pub fn get_exlcude_similar(self) -> bool {
        self.reader.get_bool_field(14)
      }
      #[inline]
      pub fn get_exclude_ambiguous(self) -> bool {
        self.reader.get_bool_field(15)
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_num_chars(self) -> u8 {
        self.builder.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn set_num_chars(&mut self, value: u8) {
        self.builder.set_data_field::<u8>(0, value);
      }
      #[inline]
      pub fn get_include_uppers(self) -> bool {
        self.builder.get_bool_field(8)
      }
      #[inline]
      pub fn set_include_uppers(&mut self, value: bool) {
        self.builder.set_bool_field(8, value);
      }
      #[inline]
      pub fn get_include_numbers(self) -> bool {
        self.builder.get_bool_field(9)
      }
      #[inline]
      pub fn set_include_numbers(&mut self, value: bool) {
        self.builder.set_bool_field(9, value);
      }
      #[inline]
      pub fn get_include_symbols(self) -> bool {
        self.builder.get_bool_field(10)
      }
      #[inline]
      pub fn set_include_symbols(&mut self, value: bool) {
        self.builder.set_bool_field(10, value);
      }
      #[inline]
      pub fn get_require_upper(self) -> bool {
        self.builder.get_bool_field(11)
      }
      #[inline]
      pub fn set_require_upper(&mut self, value: bool) {
        self.builder.set_bool_field(11, value);
      }
      #[inline]
      pub fn get_require_number(self) -> bool {
        self.builder.get_bool_field(12)
      }
      #[inline]
      pub fn set_require_number(&mut self, value: bool) {
        self.builder.set_bool_field(12, value);
      }
      #[inline]
      pub fn get_require_symbol(self) -> bool {
        self.builder.get_bool_field(13)
      }
      #[inline]
      pub fn set_require_symbol(&mut self, value: bool) {
        self.builder.set_bool_field(13, value);
      }
      #[inline]
      pub fn get_exlcude_similar(self) -> bool {
        self.builder.get_bool_field(14)
      }
      #[inline]
      pub fn set_exlcude_similar(&mut self, value: bool) {
        self.builder.set_bool_field(14, value);
      }
      #[inline]
      pub fn get_exclude_ambiguous(self) -> bool {
        self.builder.get_bool_field(15)
      }
      #[inline]
      pub fn set_exclude_ambiguous(&mut self, value: bool) {
        self.builder.set_bool_field(15, value);
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 0 };
      pub const TYPE_ID: u64 = 0xe847_23ee_70e2_1c0b;
    }
  }

  pub mod password_generator_words_param {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_num_words(self) -> u8 {
        self.reader.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn get_delim(self) -> u32 {
        self.reader.get_data_field::<u32>(1)
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_num_words(self) -> u8 {
        self.builder.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn set_num_words(&mut self, value: u8) {
        self.builder.set_data_field::<u8>(0, value);
      }
      #[inline]
      pub fn get_delim(self) -> u32 {
        self.builder.get_data_field::<u32>(1)
      }
      #[inline]
      pub fn set_delim(&mut self, value: u32) {
        self.builder.set_data_field::<u32>(1, value);
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 0 };
      pub const TYPE_ID: u64 = 0x8dfa_5958_1a02_409a;
    }
  }
}

pub mod identity {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_email(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_email(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_hidden(self) -> bool {
      self.reader.get_bool_field(0)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_email(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_email(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_email(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_email(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_hidden(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_hidden(&mut self, value: bool) {
      self.builder.set_bool_field(0, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 3 };
    pub const TYPE_ID: u64 = 0xdecb_1959_2b3c_494a;
  }
}

pub mod status {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_locked(self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_unlocked_by(
      self,
    ) -> ::capnp::Result<crate::api_capnp::option::Reader<'a, crate::api_capnp::identity::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_unlocked_by(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_autolock_at(self) -> i64 {
      self.reader.get_data_field::<i64>(1)
    }
    #[inline]
    pub fn get_version(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_version(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_autolock_timeout(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_locked(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_locked(&mut self, value: bool) {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_unlocked_by(
      self,
    ) -> ::capnp::Result<crate::api_capnp::option::Builder<'a, crate::api_capnp::identity::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_unlocked_by(
      &mut self,
      value: crate::api_capnp::option::Reader<'_, crate::api_capnp::identity::Owned>,
    ) -> ::capnp::Result<()> {
      <crate::api_capnp::option::Reader<'_,crate::api_capnp::identity::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_unlocked_by(self) -> crate::api_capnp::option::Builder<'a, crate::api_capnp::identity::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_unlocked_by(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_autolock_at(self) -> i64 {
      self.builder.get_data_field::<i64>(1)
    }
    #[inline]
    pub fn set_autolock_at(&mut self, value: i64) {
      self.builder.set_data_field::<i64>(1, value);
    }
    #[inline]
    pub fn get_version(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_version(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_version(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_version(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_autolock_timeout(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_autolock_timeout(&mut self, value: u64) {
      self.builder.set_data_field::<u64>(2, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_unlocked_by(&self) -> crate::api_capnp::option::Pipeline<crate::api_capnp::identity::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 3, pointers: 2 };
    pub const TYPE_ID: u64 = 0xcad9_d02c_6a1e_8838;
  }
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SecretType {
  Login = 0,
  Note = 1,
  Licence = 2,
  Wlan = 3,
  Password = 4,
  Other = 5,
}
impl ::capnp::traits::FromU16 for SecretType {
  #[inline]
  fn from_u16(value: u16) -> ::core::result::Result<SecretType, ::capnp::NotInSchema> {
    match value {
      0 => ::core::result::Result::Ok(SecretType::Login),
      1 => ::core::result::Result::Ok(SecretType::Note),
      2 => ::core::result::Result::Ok(SecretType::Licence),
      3 => ::core::result::Result::Ok(SecretType::Wlan),
      4 => ::core::result::Result::Ok(SecretType::Password),
      5 => ::core::result::Result::Ok(SecretType::Other),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl ::capnp::traits::ToU16 for SecretType {
  #[inline]
  fn to_u16(self) -> u16 {
    self as u16
  }
}
impl ::capnp::traits::HasTypeId for SecretType {
  #[inline]
  fn type_id() -> u64 {
    0x9872_ebcd_5881_f40bu64
  }
}

pub mod secret_entry {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(4))
    }
    #[inline]
    pub fn get_tags(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_tags(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_urls(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_urls(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.reader.get_bool_field(80)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: i64) {
      self.builder.set_data_field::<i64>(0, value);
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(4))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::api_capnp::SecretType) {
      self.builder.set_data_field::<u16>(4, value as u16)
    }
    #[inline]
    pub fn get_tags(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_tags(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_tags(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    pub fn has_tags(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_urls(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_urls(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_urls(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_urls(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.builder.get_bool_field(80)
    }
    #[inline]
    pub fn set_deleted(&mut self, value: bool) {
      self.builder.set_bool_field(80, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
    pub const TYPE_ID: u64 = 0xe906_1a4b_4d54_1be9;
  }
}

pub mod secret_list_filter {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_url(self) -> ::capnp::Result<crate::api_capnp::option::Reader<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_url(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_tag(self) -> ::capnp::Result<crate::api_capnp::option::Reader<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_tag(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::capnp::Result<crate::api_capnp::secret_list_filter::option_type::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_type(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<crate::api_capnp::option::Reader<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.reader.get_bool_field(0)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_url(self) -> ::capnp::Result<crate::api_capnp::option::Builder<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_url(
      &mut self,
      value: crate::api_capnp::option::Reader<'_, ::capnp::text::Owned>,
    ) -> ::capnp::Result<()> {
      <crate::api_capnp::option::Reader<'_,::capnp::text::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_url(self) -> crate::api_capnp::option::Builder<'a, ::capnp::text::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_url(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_tag(self) -> ::capnp::Result<crate::api_capnp::option::Builder<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_tag(
      &mut self,
      value: crate::api_capnp::option::Reader<'_, ::capnp::text::Owned>,
    ) -> ::capnp::Result<()> {
      <crate::api_capnp::option::Reader<'_,::capnp::text::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_tag(self) -> crate::api_capnp::option::Builder<'a, ::capnp::text::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    pub fn has_tag(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::capnp::Result<crate::api_capnp::secret_list_filter::option_type::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_type(
      &mut self,
      value: crate::api_capnp::secret_list_filter::option_type::Reader<'_>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_type(self) -> crate::api_capnp::secret_list_filter::option_type::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
    }
    pub fn has_type(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<crate::api_capnp::option::Builder<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(
      &mut self,
      value: crate::api_capnp::option::Reader<'_, ::capnp::text::Owned>,
    ) -> ::capnp::Result<()> {
      <crate::api_capnp::option::Reader<'_,::capnp::text::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_name(self) -> crate::api_capnp::option::Builder<'a, ::capnp::text::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), 0)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_deleted(&mut self, value: bool) {
      self.builder.set_bool_field(0, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_url(&self) -> crate::api_capnp::option::Pipeline<::capnp::text::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_tag(&self) -> crate::api_capnp::option::Pipeline<::capnp::text::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_type(&self) -> crate::api_capnp::secret_list_filter::option_type::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
    pub fn get_name(&self) -> crate::api_capnp::option::Pipeline<::capnp::text::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 4 };
    pub const TYPE_ID: u64 = 0xb647_6a49_2492_a435;
  }

  pub mod option_type {
    pub use self::Which::{None, Some};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichReader, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(1) {
          0 => ::core::result::Result::Ok(Some(::capnp::traits::FromU16::from_u16(
            self.reader.get_data_field::<u16>(0),
          ))),
          1 => ::core::result::Result::Ok(None(())),
          x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
        }
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn set_some(&mut self, value: crate::api_capnp::SecretType) {
        self.builder.set_data_field::<u16>(1, 0);
        self.builder.set_data_field::<u16>(0, value as u16)
      }
      #[inline]
      pub fn set_none(&mut self, _value: ()) {
        self.builder.set_data_field::<u16>(1, 1);
      }
      #[inline]
      pub fn which(self) -> ::core::result::Result<WhichBuilder, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(1) {
          0 => ::core::result::Result::Ok(Some(::capnp::traits::FromU16::from_u16(
            self.builder.get_data_field::<u16>(0),
          ))),
          1 => ::core::result::Result::Ok(None(())),
          x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
        }
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 0 };
      pub const TYPE_ID: u64 = 0xfc5e_7ab6_2a94_57cf;
    }
    pub enum Which {
      Some(::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema>),
      None(()),
    }
    pub type WhichReader = Which;
    pub type WhichBuilder = Which;
  }
}

pub mod secret_entry_match {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_entry(self) -> ::capnp::Result<crate::api_capnp::secret_entry::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_entry(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_name_score(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn get_name_highlights(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a, u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_name_highlights(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_url_highlights(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a, u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_url_highlights(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_tags_highlights(self) -> ::capnp::Result<::capnp::primitive_list::Reader<'a, u64>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_tags_highlights(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_entry(self) -> ::capnp::Result<crate::api_capnp::secret_entry::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_entry(&mut self, value: crate::api_capnp::secret_entry::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_entry(self) -> crate::api_capnp::secret_entry::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_entry(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_name_score(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_name_score(&mut self, value: i64) {
      self.builder.set_data_field::<i64>(0, value);
    }
    #[inline]
    pub fn get_name_highlights(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a, u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name_highlights(&mut self, value: ::capnp::primitive_list::Reader<'a, u64>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_name_highlights(self, size: u32) -> ::capnp::primitive_list::Builder<'a, u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    pub fn has_name_highlights(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_url_highlights(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a, u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_url_highlights(&mut self, value: ::capnp::primitive_list::Reader<'a, u64>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_url_highlights(self, size: u32) -> ::capnp::primitive_list::Builder<'a, u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    pub fn has_url_highlights(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_tags_highlights(self) -> ::capnp::Result<::capnp::primitive_list::Builder<'a, u64>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_tags_highlights(&mut self, value: ::capnp::primitive_list::Reader<'a, u64>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_tags_highlights(self, size: u32) -> ::capnp::primitive_list::Builder<'a, u64> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_tags_highlights(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_entry(&self) -> crate::api_capnp::secret_entry::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 4 };
    pub const TYPE_ID: u64 = 0xa436_0d13_81d8_d993;
  }
}

pub mod secret_list {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_all_tags(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_all_tags(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_entries(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::secret_entry_match::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_entries(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_all_tags(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_all_tags(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_all_tags(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    pub fn has_all_tags(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_entries(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::secret_entry_match::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_entries(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::secret_entry_match::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_entries(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::secret_entry_match::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    pub fn has_entries(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
    pub const TYPE_ID: u64 = 0x8344_d850_fd4f_f685;
  }
}

pub mod secret_version {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_secret_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(1)
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_tags(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_tags(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_urls(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_urls(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_properties(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::secret_version::property::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(4),
        ::core::option::Option::None,
      )
    }
    pub fn has_properties(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_attachments(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::secret_version::attachment::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(5),
        ::core::option::Option::None,
      )
    }
    pub fn has_attachments(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.reader.get_bool_field(16)
    }
    #[inline]
    pub fn get_recipients(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(6),
        ::core::option::Option::None,
      )
    }
    pub fn has_recipients(&self) -> bool {
      !self.reader.get_pointer_field(6).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_secret_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_secret_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_secret_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::api_capnp::SecretType) {
      self.builder.set_data_field::<u16>(0, value as u16)
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(1)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: i64) {
      self.builder.set_data_field::<i64>(1, value);
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_tags(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_tags(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_tags(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    pub fn has_tags(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_urls(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_urls(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_urls(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_urls(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_properties(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::secret_version::property::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(4),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_properties(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::secret_version::property::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_properties(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::secret_version::property::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    pub fn has_properties(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_attachments(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::secret_version::attachment::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(5),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_attachments(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::secret_version::attachment::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(5), value, false)
    }
    #[inline]
    pub fn init_attachments(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::secret_version::attachment::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(5), size)
    }
    pub fn has_attachments(&self) -> bool {
      !self.builder.get_pointer_field(5).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.builder.get_bool_field(16)
    }
    #[inline]
    pub fn set_deleted(&mut self, value: bool) {
      self.builder.set_bool_field(16, value);
    }
    #[inline]
    pub fn get_recipients(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(6),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_recipients(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(6), value, false)
    }
    #[inline]
    pub fn init_recipients(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(6), size)
    }
    pub fn has_recipients(&self) -> bool {
      !self.builder.get_pointer_field(6).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 7 };
    pub const TYPE_ID: u64 = 0x9cc9_80f1_0099_83c6;
  }

  pub mod property {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_value(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_key(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_key(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_key(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_value(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_value(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_value(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
      pub const TYPE_ID: u64 = 0xd3a4_d2a9_74e8_2093;
    }
  }

  pub mod attachment {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_mime_type(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_mime_type(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_content(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_content(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_mime_type(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_mime_type(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_mime_type(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_mime_type(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_content(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_content(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(2).set_data(value);
      }
      #[inline]
      pub fn init_content(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(2).init_data(size)
      }
      pub fn has_content(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 3 };
      pub const TYPE_ID: u64 = 0x855d_d661_fc7b_18e6;
    }
  }
}

pub mod password_strength {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_entropy(self) -> f64 {
      self.reader.get_data_field::<f64>(0)
    }
    #[inline]
    pub fn get_crack_time(self) -> f64 {
      self.reader.get_data_field::<f64>(1)
    }
    #[inline]
    pub fn get_crack_time_display(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_crack_time_display(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_score(self) -> u8 {
      self.reader.get_data_field::<u8>(16)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_entropy(self) -> f64 {
      self.builder.get_data_field::<f64>(0)
    }
    #[inline]
    pub fn set_entropy(&mut self, value: f64) {
      self.builder.set_data_field::<f64>(0, value);
    }
    #[inline]
    pub fn get_crack_time(self) -> f64 {
      self.builder.get_data_field::<f64>(1)
    }
    #[inline]
    pub fn set_crack_time(&mut self, value: f64) {
      self.builder.set_data_field::<f64>(1, value);
    }
    #[inline]
    pub fn get_crack_time_display(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_crack_time_display(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_crack_time_display(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_crack_time_display(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_score(self) -> u8 {
      self.builder.get_data_field::<u8>(16)
    }
    #[inline]
    pub fn set_score(&mut self, value: u8) {
      self.builder.set_data_field::<u8>(16, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 3, pointers: 1 };
    pub const TYPE_ID: u64 = 0xa994_a4b4_4f21_4077;
  }
}

pub mod secret {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_current(self) -> ::capnp::Result<crate::api_capnp::secret_version::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_current(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_current_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_current_block_id(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_versions(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::secret::version_ref::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_versions(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_password_strengths(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::secret::estimate::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(4),
        ::core::option::Option::None,
      )
    }
    pub fn has_password_strengths(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::api_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::api_capnp::SecretType) {
      self.builder.set_data_field::<u16>(0, value as u16)
    }
    #[inline]
    pub fn get_current(self) -> ::capnp::Result<crate::api_capnp::secret_version::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_current(&mut self, value: crate::api_capnp::secret_version::Reader<'_>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_current(self) -> crate::api_capnp::secret_version::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    pub fn has_current(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_current_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_current_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_current_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_current_block_id(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_versions(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::secret::version_ref::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_versions(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::secret::version_ref::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_versions(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::secret::version_ref::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_versions(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_password_strengths(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::secret::estimate::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(4),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_password_strengths(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::secret::estimate::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_password_strengths(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::secret::estimate::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    pub fn has_password_strengths(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_current(&self) -> crate::api_capnp::secret_version::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 5 };
    pub const TYPE_ID: u64 = 0x83d4_6332_ba1a_4ae3;
  }

  pub mod estimate {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_strength(self) -> ::capnp::Result<crate::api_capnp::password_strength::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_strength(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_key(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_key(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_key(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_strength(self) -> ::capnp::Result<crate::api_capnp::password_strength::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_strength(&mut self, value: crate::api_capnp::password_strength::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_strength(self) -> crate::api_capnp::password_strength::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_strength(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_strength(&self) -> crate::api_capnp::password_strength::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
      pub const TYPE_ID: u64 = 0xeb21_0708_91d3_9f04;
    }
  }

  pub mod version_ref {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_block_id(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_timestamp(self) -> i64 {
        self.reader.get_data_field::<i64>(0)
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_block_id(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_timestamp(self) -> i64 {
        self.builder.get_data_field::<i64>(0)
      }
      #[inline]
      pub fn set_timestamp(&mut self, value: i64) {
        self.builder.set_data_field::<i64>(0, value);
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
      pub const TYPE_ID: u64 = 0xd0d1_ef7f_b6b6_dd69;
    }
  }
}

pub mod command {
  pub use self::Which::{
    Add, AddIdentity, ChangePassphrase, ClipboardCurrentlyProviding, ClipboardDestroy, ClipboardIsDone,
    ClipboardProvideNext, DeleteStoreConfig, GenerateId, GeneratePassword, Get, GetDefaultStore, GetVersion,
    Identities, List, ListStores, Lock, PollEvents, SecretToClipboard, SetDefaultStore, Status, Unlock, UpdateIndex,
    UpsertStoreConfig,
  };

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    pub fn has_upsert_store_config(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_delete_store_config(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 2 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_set_default_store(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_generate_password(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 6 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_status(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 8 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_lock(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 9 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_identities(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 11 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_update_index(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 15 {
        return false;
      }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(ListStores(())),
        1 => ::core::result::Result::Ok(UpsertStoreConfig(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        2 => ::core::result::Result::Ok(DeleteStoreConfig(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        3 => ::core::result::Result::Ok(GetDefaultStore(())),
        4 => ::core::result::Result::Ok(SetDefaultStore(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        5 => ::core::result::Result::Ok(GenerateId(())),
        6 => ::core::result::Result::Ok(GeneratePassword(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        7 => ::core::result::Result::Ok(PollEvents(self.reader.get_data_field::<u64>(1))),
        8 => ::core::result::Result::Ok(Status(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        9 => ::core::result::Result::Ok(Lock(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        10 => ::core::result::Result::Ok(Unlock(::capnp::traits::FromStructReader::new(self.reader))),
        11 => ::core::result::Result::Ok(Identities(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        12 => ::core::result::Result::Ok(AddIdentity(::capnp::traits::FromStructReader::new(self.reader))),
        13 => ::core::result::Result::Ok(ChangePassphrase(::capnp::traits::FromStructReader::new(self.reader))),
        14 => ::core::result::Result::Ok(List(::capnp::traits::FromStructReader::new(self.reader))),
        15 => ::core::result::Result::Ok(UpdateIndex(::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        16 => ::core::result::Result::Ok(Add(::capnp::traits::FromStructReader::new(self.reader))),
        17 => ::core::result::Result::Ok(Get(::capnp::traits::FromStructReader::new(self.reader))),
        18 => ::core::result::Result::Ok(GetVersion(::capnp::traits::FromStructReader::new(self.reader))),
        19 => ::core::result::Result::Ok(SecretToClipboard(::capnp::traits::FromStructReader::new(self.reader))),
        20 => ::core::result::Result::Ok(ClipboardIsDone(())),
        21 => ::core::result::Result::Ok(ClipboardCurrentlyProviding(())),
        22 => ::core::result::Result::Ok(ClipboardProvideNext(())),
        23 => ::core::result::Result::Ok(ClipboardDestroy(())),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn set_list_stores(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 0);
    }
    #[inline]
    pub fn set_upsert_store_config(
      &mut self,
      value: crate::api_capnp::store_config::Reader<'_>,
    ) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_upsert_store_config(self) -> crate::api_capnp::store_config::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_upsert_store_config(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_delete_store_config(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.set_data_field::<u16>(0, 2);
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_delete_store_config(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 2);
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_delete_store_config(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 2 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_get_default_store(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 3);
    }
    #[inline]
    pub fn set_set_default_store(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.set_data_field::<u16>(0, 4);
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_set_default_store(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 4);
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_set_default_store(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_generate_id(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 5);
    }
    #[inline]
    pub fn set_generate_password(
      &mut self,
      value: crate::api_capnp::password_generator_param::Reader<'_>,
    ) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_generate_password(self) -> crate::api_capnp::password_generator_param::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_generate_password(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 6 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_poll_events(&mut self, value: u64) {
      self.builder.set_data_field::<u16>(0, 7);
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn set_status(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.set_data_field::<u16>(0, 8);
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_status(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 8);
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_status(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 8 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_lock(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.set_data_field::<u16>(0, 9);
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_lock(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 9);
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_lock(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 9 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn init_unlock(self) -> crate::api_capnp::command::unlock::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 10);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      self.builder.get_pointer_field(2).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn set_identities(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.set_data_field::<u16>(0, 11);
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_identities(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 11);
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_identities(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 11 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn init_add_identity(self) -> crate::api_capnp::command::add_identity::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 12);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      self.builder.get_pointer_field(2).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_change_passphrase(self) -> crate::api_capnp::command::change_passphrase::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 13);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_list(self) -> crate::api_capnp::command::list::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 14);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn set_update_index(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.set_data_field::<u16>(0, 15);
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_update_index(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 15);
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_update_index(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 15 {
        return false;
      }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn init_add(self) -> crate::api_capnp::command::add::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 16);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_get(self) -> crate::api_capnp::command::get::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 17);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_get_version(self) -> crate::api_capnp::command::get_version::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 18);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_secret_to_clipboard(self) -> crate::api_capnp::command::secret_to_clipboard::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 19);
      self.builder.get_pointer_field(0).clear();
      self.builder.get_pointer_field(1).clear();
      self.builder.get_pointer_field(2).clear();
      self.builder.get_pointer_field(3).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn set_clipboard_is_done(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 20);
    }
    #[inline]
    pub fn set_clipboard_currently_providing(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 21);
    }
    #[inline]
    pub fn set_clipboard_provide_next(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 22);
    }
    #[inline]
    pub fn set_clipboard_destroy(&mut self, _value: ()) {
      self.builder.set_data_field::<u16>(0, 23);
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => ::core::result::Result::Ok(ListStores(())),
        1 => ::core::result::Result::Ok(UpsertStoreConfig(
          ::capnp::traits::FromPointerBuilder::get_from_pointer(
            self.builder.get_pointer_field(0),
            ::core::option::Option::None,
          ),
        )),
        2 => ::core::result::Result::Ok(DeleteStoreConfig(
          ::capnp::traits::FromPointerBuilder::get_from_pointer(
            self.builder.get_pointer_field(0),
            ::core::option::Option::None,
          ),
        )),
        3 => ::core::result::Result::Ok(GetDefaultStore(())),
        4 => ::core::result::Result::Ok(SetDefaultStore(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        5 => ::core::result::Result::Ok(GenerateId(())),
        6 => ::core::result::Result::Ok(GeneratePassword(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        7 => ::core::result::Result::Ok(PollEvents(self.builder.get_data_field::<u64>(1))),
        8 => ::core::result::Result::Ok(Status(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        9 => ::core::result::Result::Ok(Lock(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        10 => ::core::result::Result::Ok(Unlock(::capnp::traits::FromStructBuilder::new(self.builder))),
        11 => ::core::result::Result::Ok(Identities(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        12 => ::core::result::Result::Ok(AddIdentity(::capnp::traits::FromStructBuilder::new(self.builder))),
        13 => ::core::result::Result::Ok(ChangePassphrase(::capnp::traits::FromStructBuilder::new(self.builder))),
        14 => ::core::result::Result::Ok(List(::capnp::traits::FromStructBuilder::new(self.builder))),
        15 => ::core::result::Result::Ok(UpdateIndex(::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        ))),
        16 => ::core::result::Result::Ok(Add(::capnp::traits::FromStructBuilder::new(self.builder))),
        17 => ::core::result::Result::Ok(Get(::capnp::traits::FromStructBuilder::new(self.builder))),
        18 => ::core::result::Result::Ok(GetVersion(::capnp::traits::FromStructBuilder::new(self.builder))),
        19 => ::core::result::Result::Ok(SecretToClipboard(::capnp::traits::FromStructBuilder::new(self.builder))),
        20 => ::core::result::Result::Ok(ClipboardIsDone(())),
        21 => ::core::result::Result::Ok(ClipboardCurrentlyProviding(())),
        22 => ::core::result::Result::Ok(ClipboardProvideNext(())),
        23 => ::core::result::Result::Ok(ClipboardDestroy(())),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
    pub const TYPE_ID: u64 = 0x8b29_b36e_172f_9d7b;
  }
  pub enum Which<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15> {
    ListStores(()),
    UpsertStoreConfig(A0),
    DeleteStoreConfig(A1),
    GetDefaultStore(()),
    SetDefaultStore(A2),
    GenerateId(()),
    GeneratePassword(A3),
    PollEvents(u64),
    Status(A4),
    Lock(A5),
    Unlock(A6),
    Identities(A7),
    AddIdentity(A8),
    ChangePassphrase(A9),
    List(A10),
    UpdateIndex(A11),
    Add(A12),
    Get(A13),
    GetVersion(A14),
    SecretToClipboard(A15),
    ClipboardIsDone(()),
    ClipboardCurrentlyProviding(()),
    ClipboardProvideNext(()),
    ClipboardDestroy(()),
  }
  pub type WhichReader<'a> = Which<
    ::capnp::Result<crate::api_capnp::store_config::Reader<'a>>,
    ::capnp::Result<::capnp::text::Reader<'a>>,
    ::capnp::Result<::capnp::text::Reader<'a>>,
    ::capnp::Result<crate::api_capnp::password_generator_param::Reader<'a>>,
    ::capnp::Result<::capnp::text::Reader<'a>>,
    ::capnp::Result<::capnp::text::Reader<'a>>,
    crate::api_capnp::command::unlock::Reader<'a>,
    ::capnp::Result<::capnp::text::Reader<'a>>,
    crate::api_capnp::command::add_identity::Reader<'a>,
    crate::api_capnp::command::change_passphrase::Reader<'a>,
    crate::api_capnp::command::list::Reader<'a>,
    ::capnp::Result<::capnp::text::Reader<'a>>,
    crate::api_capnp::command::add::Reader<'a>,
    crate::api_capnp::command::get::Reader<'a>,
    crate::api_capnp::command::get_version::Reader<'a>,
    crate::api_capnp::command::secret_to_clipboard::Reader<'a>,
  >;
  pub type WhichBuilder<'a> = Which<
    ::capnp::Result<crate::api_capnp::store_config::Builder<'a>>,
    ::capnp::Result<::capnp::text::Builder<'a>>,
    ::capnp::Result<::capnp::text::Builder<'a>>,
    ::capnp::Result<crate::api_capnp::password_generator_param::Builder<'a>>,
    ::capnp::Result<::capnp::text::Builder<'a>>,
    ::capnp::Result<::capnp::text::Builder<'a>>,
    crate::api_capnp::command::unlock::Builder<'a>,
    ::capnp::Result<::capnp::text::Builder<'a>>,
    crate::api_capnp::command::add_identity::Builder<'a>,
    crate::api_capnp::command::change_passphrase::Builder<'a>,
    crate::api_capnp::command::list::Builder<'a>,
    ::capnp::Result<::capnp::text::Builder<'a>>,
    crate::api_capnp::command::add::Builder<'a>,
    crate::api_capnp::command::get::Builder<'a>,
    crate::api_capnp::command::get_version::Builder<'a>,
    crate::api_capnp::command::secret_to_clipboard::Builder<'a>,
  >;

  pub mod unlock {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_identity_id(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_passphrase(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_passphrase(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_identity_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_identity_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_identity_id(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_passphrase(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_passphrase(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(2).set_data(value);
      }
      #[inline]
      pub fn init_passphrase(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(2).init_data(size)
      }
      pub fn has_passphrase(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xe635_f6da_5ac7_7c7b;
    }
  }

  pub mod add_identity {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_identity(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_passphrase(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_passphrase(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_identity(self) -> ::capnp::Result<crate::api_capnp::identity::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_identity(&mut self, value: crate::api_capnp::identity::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_identity(self) -> crate::api_capnp::identity::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_identity(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_passphrase(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_passphrase(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(2).set_data(value);
      }
      #[inline]
      pub fn init_passphrase(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(2).init_data(size)
      }
      pub fn has_passphrase(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_identity(&self) -> crate::api_capnp::identity::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xba81_dfda_ef77_8703;
    }
  }

  pub mod change_passphrase {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_passphrase(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_passphrase(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_passphrase(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_passphrase(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(1).set_data(value);
      }
      #[inline]
      pub fn init_passphrase(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(1).init_data(size)
      }
      pub fn has_passphrase(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xa9cf_e6fc_3af1_c661;
    }
  }

  pub mod list {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_filter(self) -> ::capnp::Result<crate::api_capnp::secret_list_filter::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_filter(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_filter(self) -> ::capnp::Result<crate::api_capnp::secret_list_filter::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_filter(&mut self, value: crate::api_capnp::secret_list_filter::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_filter(self) -> crate::api_capnp::secret_list_filter::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_filter(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_filter(&self) -> crate::api_capnp::secret_list_filter::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xeec8_9f82_3a79_b1d6;
    }
  }

  pub mod add {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_secret_version(self) -> ::capnp::Result<crate::api_capnp::secret_version::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_secret_version(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_secret_version(self) -> ::capnp::Result<crate::api_capnp::secret_version::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_secret_version(&mut self, value: crate::api_capnp::secret_version::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_secret_version(self) -> crate::api_capnp::secret_version::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
      }
      pub fn has_secret_version(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_secret_version(&self) -> crate::api_capnp::secret_version::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xbd4e_3892_93d1_69d5;
    }
  }

  pub mod get {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_secret_id(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_secret_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_secret_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_secret_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_secret_id(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xff64_f5a5_b381_5dcb;
    }
  }

  pub mod get_version {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_block_id(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_block_id(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xfa4f_1ac6_57f0_72cb;
    }
  }

  pub mod secret_to_clipboard {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_store_name(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_block_id(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_properties(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      pub fn has_properties(&self) -> bool {
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_display_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(3),
          ::core::option::Option::None,
        )
      }
      pub fn has_display_name(&self) -> bool {
        !self.reader.get_pointer_field(3).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_store_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_store_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_store_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_store_name(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_block_id(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
      #[inline]
      pub fn get_properties(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(2),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_properties(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(2), value, false)
      }
      #[inline]
      pub fn init_properties(self, size: u32) -> ::capnp::text_list::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
      }
      pub fn has_properties(&self) -> bool {
        !self.builder.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn get_display_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(3),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_display_name(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(3).set_text(value);
      }
      #[inline]
      pub fn init_display_name(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(3).init_text(size)
      }
      pub fn has_display_name(&self) -> bool {
        !self.builder.get_pointer_field(3).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
      pub const TYPE_ID: u64 = 0xc2cd_f293_6600_2564;
    }
  }
}

pub mod result_store_configs {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_configs(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::store_config::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_configs(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_configs(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::store_config::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_configs(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::store_config::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_configs(self, size: u32) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::store_config::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    pub fn has_configs(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 1 };
    pub const TYPE_ID: u64 = 0xc1a8_17c5_e943_9a5b;
  }
}

pub mod result_option_string {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_content(self) -> ::capnp::Result<crate::api_capnp::option::Reader<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_content(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_content(self) -> ::capnp::Result<crate::api_capnp::option::Builder<'a, ::capnp::text::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_content(
      &mut self,
      value: crate::api_capnp::option::Reader<'_, ::capnp::text::Owned>,
    ) -> ::capnp::Result<()> {
      <crate::api_capnp::option::Reader<'_,::capnp::text::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_content(self) -> crate::api_capnp::option::Builder<'a, ::capnp::text::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_content(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {
    pub fn get_content(&self) -> crate::api_capnp::option::Pipeline<::capnp::text::Owned> {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 1 };
    pub const TYPE_ID: u64 = 0xac43_860c_30af_6f4c;
  }
}

pub mod result_identities {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_identities(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::identity::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_identities(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_identities(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::identity::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_identities(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::identity::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_identities(self, size: u32) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::identity::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    pub fn has_identities(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 1 };
    pub const TYPE_ID: u64 = 0xc2e8_60ed_14cb_aa84;
  }
}

pub mod result_events {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_events(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::api_capnp::event::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_events(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_events(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::api_capnp::event::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_events(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::api_capnp::event::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_events(self, size: u32) -> ::capnp::struct_list::Builder<'a, crate::api_capnp::event::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    pub fn has_events(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 1 };
    pub const TYPE_ID: u64 = 0xb8b1_a961_a2bd_dac0;
  }
}
