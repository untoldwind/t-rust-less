// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: src/secrets_store.capnp

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KeyDerivationType {
  Argon2 = 0,
}
impl ::capnp::traits::FromU16 for KeyDerivationType {
  #[inline]
  fn from_u16(value: u16) -> ::core::result::Result<KeyDerivationType, ::capnp::NotInSchema> {
    match value {
      0 => ::core::result::Result::Ok(KeyDerivationType::Argon2),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl ::capnp::traits::ToU16 for KeyDerivationType {
  #[inline]
  fn to_u16(self) -> u16 {
    self as u16
  }
}
impl ::capnp::traits::HasTypeId for KeyDerivationType {
  #[inline]
  fn type_id() -> u64 {
    0xef69_a995_a2f2_b938u64
  }
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum KeyType {
  RsaAesGcm = 0,
  Ed25519Chacha20Poly1305 = 1,
}
impl ::capnp::traits::FromU16 for KeyType {
  #[inline]
  fn from_u16(value: u16) -> ::core::result::Result<KeyType, ::capnp::NotInSchema> {
    match value {
      0 => ::core::result::Result::Ok(KeyType::RsaAesGcm),
      1 => ::core::result::Result::Ok(KeyType::Ed25519Chacha20Poly1305),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl ::capnp::traits::ToU16 for KeyType {
  #[inline]
  fn to_u16(self) -> u16 {
    self as u16
  }
}
impl ::capnp::traits::HasTypeId for KeyType {
  #[inline]
  fn type_id() -> u64 {
    0x84b3_21f9_95d5_f7f7u64
  }
}

pub mod ring {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_email(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_email(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_public_keys(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::ring::public_key::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_public_keys(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_private_keys(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::ring::private_key::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(4),
        ::core::option::Option::None,
      )
    }
    pub fn has_private_keys(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_hidden(self) -> bool {
      self.reader.get_bool_field(0)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_email(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_email(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_email(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_email(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_public_keys(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::ring::public_key::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_public_keys(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::ring::public_key::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_public_keys(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::ring::public_key::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_public_keys(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_private_keys(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::ring::private_key::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(4),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_private_keys(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::ring::private_key::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(4), value, false)
    }
    #[inline]
    pub fn init_private_keys(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::ring::private_key::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), size)
    }
    pub fn has_private_keys(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_hidden(self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_hidden(&mut self, value: bool) {
      self.builder.set_bool_field(0, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 5 };
    pub const TYPE_ID: u64 = 0xa52b_0bdd_a57c_1e85;
  }

  pub mod public_key {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::KeyType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::KeyType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_type(&mut self, value: crate::secrets_store_capnp::KeyType) {
        self.builder.set_data_field::<u16>(0, value as u16)
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_key(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(0).set_data(value);
      }
      #[inline]
      pub fn init_key(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(0).init_data(size)
      }
      pub fn has_key(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
      pub const TYPE_ID: u64 = 0xd941_ed14_ea33_b327;
    }
  }

  pub mod private_key {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::KeyType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_derivation_type(
        self,
      ) -> ::core::result::Result<crate::secrets_store_capnp::KeyDerivationType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn get_preset(self) -> u8 {
        self.reader.get_data_field::<u8>(4)
      }
      #[inline]
      pub fn get_nonce(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_nonce(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_crypted_key(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_crypted_key(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::KeyType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_type(&mut self, value: crate::secrets_store_capnp::KeyType) {
        self.builder.set_data_field::<u16>(0, value as u16)
      }
      #[inline]
      pub fn get_derivation_type(
        self,
      ) -> ::core::result::Result<crate::secrets_store_capnp::KeyDerivationType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(1))
      }
      #[inline]
      pub fn set_derivation_type(&mut self, value: crate::secrets_store_capnp::KeyDerivationType) {
        self.builder.set_data_field::<u16>(1, value as u16)
      }
      #[inline]
      pub fn get_preset(self) -> u8 {
        self.builder.get_data_field::<u8>(4)
      }
      #[inline]
      pub fn set_preset(&mut self, value: u8) {
        self.builder.set_data_field::<u8>(4, value);
      }
      #[inline]
      pub fn get_nonce(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_nonce(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(0).set_data(value);
      }
      #[inline]
      pub fn init_nonce(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(0).init_data(size)
      }
      pub fn has_nonce(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_crypted_key(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_crypted_key(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(1).set_data(value);
      }
      #[inline]
      pub fn init_crypted_key(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(1).init_data(size)
      }
      pub fn has_crypted_key(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 2 };
      pub const TYPE_ID: u64 = 0x96f1_3aa1_6dca_45ec;
    }
  }
}

pub mod block {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_headers(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::block::header::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_headers(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_content(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_content(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_headers(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::block::header::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_headers(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::block::header::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_headers(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::block::header::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    pub fn has_headers(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_content(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_content(&mut self, value: ::capnp::data::Reader<'_>) {
      self.builder.get_pointer_field(1).set_data(value);
    }
    #[inline]
    pub fn init_content(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(1).init_data(size)
    }
    pub fn has_content(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
    pub const TYPE_ID: u64 = 0x8d3d_18b2_169e_f291;
  }

  pub mod header {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::KeyType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_common_key(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_common_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_recipients(
        self,
      ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::block::recipient_key::Owned>>
      {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_recipients(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::KeyType, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_type(&mut self, value: crate::secrets_store_capnp::KeyType) {
        self.builder.set_data_field::<u16>(0, value as u16)
      }
      #[inline]
      pub fn get_common_key(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_common_key(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(0).set_data(value);
      }
      #[inline]
      pub fn init_common_key(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(0).init_data(size)
      }
      pub fn has_common_key(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_recipients(
        self,
      ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::block::recipient_key::Owned>>
      {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_recipients(
        &mut self,
        value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::block::recipient_key::Owned>,
      ) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_recipients(
        self,
        size: u32,
      ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::block::recipient_key::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      pub fn has_recipients(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 2 };
      pub const TYPE_ID: u64 = 0x866d_2466_df2f_44b2;
    }
  }

  pub mod recipient_key {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_id(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_crypted_key(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_crypted_key(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_id(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_crypted_key(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_crypted_key(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(1).set_data(value);
      }
      #[inline]
      pub fn init_crypted_key(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(1).init_data(size)
      }
      pub fn has_crypted_key(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
      pub const TYPE_ID: u64 = 0xddc5_da13_e743_9e2f;
    }
  }
}

pub mod index {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_heads(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::index::head::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_heads(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_entries(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::index::entry::Owned>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_entries(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_heads(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::index::head::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_heads(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::index::head::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_heads(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::index::head::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    pub fn has_heads(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_entries(
      self,
    ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::index::entry::Owned>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_entries(
      &mut self,
      value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::index::entry::Owned>,
    ) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_entries(
      self,
      size: u32,
    ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::index::entry::Owned> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
    }
    pub fn has_entries(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
    pub const TYPE_ID: u64 = 0xedcd_7dbb_0bd9_f5b9;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq)]
  pub enum HeadOperation {
    Add = 0,
    Delete = 1,
  }
  impl ::capnp::traits::FromU16 for HeadOperation {
    #[inline]
    fn from_u16(value: u16) -> ::core::result::Result<HeadOperation, ::capnp::NotInSchema> {
      match value {
        0 => ::core::result::Result::Ok(HeadOperation::Add),
        1 => ::core::result::Result::Ok(HeadOperation::Delete),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl ::capnp::traits::ToU16 for HeadOperation {
    #[inline]
    fn to_u16(self) -> u16 {
      self as u16
    }
  }
  impl ::capnp::traits::HasTypeId for HeadOperation {
    #[inline]
    fn type_id() -> u64 {
      0xac4c_c0a2_0812_023au64
    }
  }

  pub mod head {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_node_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_node_id(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_operation(
        self,
      ) -> ::core::result::Result<crate::secrets_store_capnp::index::HeadOperation, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_block_id(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_node_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_node_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(0).set_text(value);
      }
      #[inline]
      pub fn init_node_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(0).init_text(size)
      }
      pub fn has_node_id(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_operation(
        self,
      ) -> ::core::result::Result<crate::secrets_store_capnp::index::HeadOperation, ::capnp::NotInSchema> {
        ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
      }
      #[inline]
      pub fn set_operation(&mut self, value: crate::secrets_store_capnp::index::HeadOperation) {
        self.builder.set_data_field::<u16>(0, value as u16)
      }
      #[inline]
      pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
        self.builder.get_pointer_field(1).set_text(value);
      }
      #[inline]
      pub fn init_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
        self.builder.get_pointer_field(1).init_text(size)
      }
      pub fn has_block_id(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 2 };
      pub const TYPE_ID: u64 = 0x8827_f3bb_8f0f_b4e1;
    }
  }

  pub mod entry {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_entry(self) -> ::capnp::Result<crate::secrets_store_capnp::secret_entry::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_entry(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_version_refs(
        self,
      ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::secret_version_ref::Owned>>
      {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      pub fn has_version_refs(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_entry(self) -> ::capnp::Result<crate::secrets_store_capnp::secret_entry::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_entry(&mut self, value: crate::secrets_store_capnp::secret_entry::Reader<'_>) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_entry(self) -> crate::secrets_store_capnp::secret_entry::Builder<'a> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      pub fn has_entry(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_version_refs(
        self,
      ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::secret_version_ref::Owned>>
      {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(1),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_version_refs(
        &mut self,
        value: ::capnp::struct_list::Reader<'a, crate::secrets_store_capnp::secret_version_ref::Owned>,
      ) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_version_refs(
        self,
        size: u32,
      ) -> ::capnp::struct_list::Builder<'a, crate::secrets_store_capnp::secret_version_ref::Owned> {
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), size)
      }
      pub fn has_version_refs(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless }
      }
    }
    impl Pipeline {
      pub fn get_entry(&self) -> crate::secrets_store_capnp::secret_entry::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
      pub const TYPE_ID: u64 = 0xfb4e_df40_ef58_a280;
    }
  }
}

#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum SecretType {
  Login = 0,
  Note = 1,
  Licence = 2,
  Wlan = 3,
  Password = 4,
  Other = 5,
}
impl ::capnp::traits::FromU16 for SecretType {
  #[inline]
  fn from_u16(value: u16) -> ::core::result::Result<SecretType, ::capnp::NotInSchema> {
    match value {
      0 => ::core::result::Result::Ok(SecretType::Login),
      1 => ::core::result::Result::Ok(SecretType::Note),
      2 => ::core::result::Result::Ok(SecretType::Licence),
      3 => ::core::result::Result::Ok(SecretType::Wlan),
      4 => ::core::result::Result::Ok(SecretType::Password),
      5 => ::core::result::Result::Ok(SecretType::Other),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl ::capnp::traits::ToU16 for SecretType {
  #[inline]
  fn to_u16(self) -> u16 {
    self as u16
  }
}
impl ::capnp::traits::HasTypeId for SecretType {
  #[inline]
  fn type_id() -> u64 {
    0xd2ab_cf28_752d_5330u64
  }
}

pub mod secret_entry {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    pub fn has_name(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(4))
    }
    #[inline]
    pub fn get_tags(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    pub fn has_tags(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_urls(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    pub fn has_urls(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.reader.get_bool_field(80)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: i64) {
      self.builder.set_data_field::<i64>(0, value);
    }
    #[inline]
    pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(1),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_name(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::secrets_store_capnp::SecretType, ::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(4))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::secrets_store_capnp::SecretType) {
      self.builder.set_data_field::<u16>(4, value as u16)
    }
    #[inline]
    pub fn get_tags(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(2),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_tags(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_tags(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), size)
    }
    pub fn has_tags(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_urls(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(3),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_urls(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(3), value, false)
    }
    #[inline]
    pub fn init_urls(self, size: u32) -> ::capnp::text_list::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(3), size)
    }
    pub fn has_urls(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_deleted(self) -> bool {
      self.builder.get_bool_field(80)
    }
    #[inline]
    pub fn set_deleted(&mut self, value: bool) {
      self.builder.set_bool_field(80, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 4 };
    pub const TYPE_ID: u64 = 0xfcf7_03a4_fb0b_8bdf;
  }
}

pub mod secret_version_ref {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(
        &self.reader.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    pub fn has_block_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_block_id(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(
        self.builder.get_pointer_field(0),
        ::core::option::Option::None,
      )
    }
    #[inline]
    pub fn set_block_id(&mut self, value: ::capnp::text::Reader<'_>) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_block_id(self, size: u32) -> ::capnp::text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_block_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value: i64) {
      self.builder.set_data_field::<i64>(0, value);
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
    pub const TYPE_ID: u64 = 0xde5d_1965_15a4_7d43;
  }
}
